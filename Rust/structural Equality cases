Structural Equality

In case of Integer 

Rust programming language differentiates between signed and unsigned integer types .
Rust comes with multiple integer types: u32, i8, usize, isize . They all have something in common, they are prefixed with either u (standing for unsigned) or i (standing for, well integer).
Case A:
let x: i32 = 4; let y: i16 = 4; println!("{}", x == y);
When compiling the snippet above, the compiler prints the following error:
error[E0308]: mismatched types --> src/main.rs:5:25 | 5 | println!("{}", x == y); | ^ expected i32, found i16

Case B:
Multiple variables can interact with the same data in different ways in Rust. Let’s look at an example using an integer 
   let x = 5;
    let y = x;
// answer 5 in case integer 
We can probably guess what this is doing: “bind the value 5 to x; then make a copy of the value in x and bind it to y.” We now have two variables, x and y, and both equal 5. This is indeed what is happening, because integers are simple values with a known, fixed size, and these two 5 values are pushed onto the stack.
Some important points 
Numeric cast 
Casting between two integers of the same size (e.g. i32 -> u32) is not a probelm
Casting from a larger integer to a smaller integer (e.g. u32 -> u8) will truncate
Casting from a smaller integer to a larger integer (e.g. u8 -> u32) will
zero-extend if the source is unsigned
sign-extend if the source is signed
Casting from a float to an integer will round the float towards zero
Casting from an integer to float will produce the closest possible float 
Casting from an f32 to an f64 is perfect and lossless
Casting from an f64 to an f32 will produce the closest possible f32
Enum cast
Casts an enum to its discriminant, then uses a numeric cast if needed.
Primitive to integer cast
false casts to 0, true casts to 1
char casts to the value of the code point, then uses a numeric cast if needed.
u8 to char cast
Casts to the char with the corresponding code point.
The complete casting with respect to relative type can be studied in more detail.

String version:

   let s1 = String::from("hello");
    let s2 = s1;// wrong

When we assign s1 to s2, the String data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. 
We do not copy the data on the heap that the pointer refers to.

Source:
https://doc.rust-lang.org/reference/expressions/operator-expr.html#comparison-operators
https://medium.com/@marcinbaraniecki/on-integer-types-in-rust-b3dc1b0a23d3
https://www.reddit.com/r/rust/comments/dbhbxl/a_couple_questions_about_string_comparison/
https://www.linuxjournal.com/content/text-processing-rust

